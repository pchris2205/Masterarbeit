/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         250;

deltaT          1;

writeControl    timeStep;

writeInterval   50;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

/*
functions
{
    fieldAverage
    {
        type            fieldAverage;
        libs            (fieldFunctionObjects);
        executeControl  timeStep;
        writeControl    writeTime;
        enabled         true;
        
        fields
        (
            U
            {
                mean            yes;
                prime2Mean      yes;
                base            time;
            }
        );
    }

    turbulenceFields
    {
        type            turbulenceFields;
        libs            (fieldFunctionObjects);
        executeControl  timeStep;
        writeControl    writeTime;
        enabled         true;

        field           R;
    }

    totalTKE
    {
        type            coded;
        libs            ("libutilityFunctionObjects.so");
        name            totalTKE;
        executeControl  timeStep;
        writeControl    writeTime;
        enabled         true;

    /*---------------------------------------------------------------------------*\

        Total Turbulent Kinect Energy Evaluation
            ** Requires fieldAverage Function to Obtain UPrime2Mean**
                ** Resolved Reynolds Stress Tensor
            ** Requires turbulenceFields Function to Obtain R**
                ** Subgrid Reynolds Stress Tensor

    \*---------------------------------------------------------------------------*/
/*
        codeExecute
        #{
            static autoPtr<volScalarField> totalTKE;

            if
            (
                mesh().foundObject<volSymmTensorField>("UPrime2Mean")
                &&
                mesh().foundObject<volSymmTensorField>("turbulenceProperties:R")
                &&
                mesh().foundObject<volScalarField>("totalTKE") == 0
            )
            {
                Info << "Turbulent Kinect Energy:" << endl;
                Info << "    Initialising" << endl;
                Info << "    Calculating" << nl << endl;

                totalTKE.set
                (
                    new volScalarField
                    (
                        IOobject
                        (
                            "totalTKE",
                            mesh().time().timeName(),
                            mesh(),
                            IOobject::NO_READ,
                            IOobject::AUTO_WRITE
                        ),
                        mesh(),
                        dimensionedScalar
                        (
                            "totalTKE",
                            dimensionSet(0,2,-2,0,0,0,0),
                            0
                        )
                    )
                );

                const volSymmTensorField& R = mesh().lookupObjectRef<volSymmTensorField>("turbulenceProperties:R");
                const volSymmTensorField& UPrime2Mean = mesh().lookupObjectRef<volSymmTensorField>("UPrime2Mean");

                volScalarField& totalTKE = mesh().lookupObjectRef<volScalarField>("totalTKE");
                totalTKE = (0.5 * tr(R)) + (0.5 * tr(UPrime2Mean));
                //totalTKE.write();
            }

            else if
            (
                mesh().foundObject<volSymmTensorField>("UPrime2Mean")
                &&
                mesh().foundObject<volSymmTensorField>("turbulenceProperties:R")
                &&
                mesh().foundObject<volScalarField>("totalTKE")
            )
            {
                Info << "Turbulent Kinect Energy:" << endl;
                Info << "    Calculating" << nl << endl;

                const volSymmTensorField& R = mesh().lookupObjectRef<volSymmTensorField>("turbulenceProperties:R");
                const volSymmTensorField& UPrime2Mean = mesh().lookupObjectRef<volSymmTensorField>("UPrime2Mean");

                volScalarField& totalTKE = mesh().lookupObjectRef<volScalarField>("totalTKE");
                totalTKE = (0.5 * tr(R)) + (0.5 * tr(UPrime2Mean));
                //totalTKE.write();
            }

            else
            {
                Info << "Turbulent Kinect Energy:" << endl;
                Warning << endl
                        << "    Unable to Calculate Turbulent Kinect Energy" << endl
                        << "    UPrime2Mean and/or R Unavailable" << endl
                        << "    Enable fieldAverage and turbulenceFields Functions" << nl << endl;
            }
        #};
    }
}

// ************************************************************************* //
